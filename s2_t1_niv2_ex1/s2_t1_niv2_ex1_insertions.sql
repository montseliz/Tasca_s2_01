-- MySQL Script generated by MySQL Workbench
-- Sat Jan 14 23:23:03 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema youtube
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema youtube
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `youtube` DEFAULT CHARACTER SET utf8 ;
USE `youtube` ;

-- -----------------------------------------------------
-- Table `youtube`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`user` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `user_name` VARCHAR(45) NOT NULL,
  `user_password` VARCHAR(9) NOT NULL,
  `user_email` VARCHAR(45) NOT NULL,
  `user_gender` ENUM('F', 'M') NOT NULL COMMENT 'F: Female\nM: Male',
  `user_country` VARCHAR(45) NOT NULL,
  `user_zip` VARCHAR(5) NULL DEFAULT NULL,
  `user_birthdate` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `user_name_UNIQUE` (`user_name` ASC) VISIBLE,
  UNIQUE INDEX `user_password_UNIQUE` (`user_password` ASC) VISIBLE,
  UNIQUE INDEX `user_email_UNIQUE` (`user_email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`channel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`channel` (
  `channel_id` INT NOT NULL AUTO_INCREMENT,
  `channel_name` VARCHAR(45) NOT NULL,
  `channel_description` VARCHAR(255) NULL DEFAULT NULL,
  `channel_datetime_creation` DATETIME NOT NULL,
  `user_user_id` INT NOT NULL,
  PRIMARY KEY (`channel_id`),
  UNIQUE INDEX `channel_name_UNIQUE` (`channel_name` ASC) VISIBLE,
  INDEX `fk_channel_user1_idx` (`user_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_channel_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`video` (
  `video_id` INT NOT NULL AUTO_INCREMENT,
  `video_title` VARCHAR(100) NOT NULL,
  `video_description` VARCHAR(255) NULL DEFAULT NULL,
  `video_size` DOUBLE(10,2) NOT NULL,
  `video_file_name` VARCHAR(45) NOT NULL,
  `video_duration` TIME NOT NULL,
  `video_thumbnail` VARCHAR(255) NOT NULL,
  `video_reproductions` INT UNSIGNED NULL DEFAULT 0 COMMENT 'In case of not having reproductions yet, the defaut expression indicates that has 0 reproductions. ',
  `video_likes` INT UNSIGNED NULL DEFAULT 0 COMMENT 'In case of not having likes, the defaut expression indicates that has 0 likes. ',
  `video_dislikes` INT UNSIGNED NULL DEFAULT 0 COMMENT 'In case of not having dislikes, the defaut expression indicates that has 0 dislikes. ',
  `video_condition` ENUM('públic', 'ocult', 'privat') NOT NULL,
  `video_datetime_publishing` DATETIME NOT NULL,
  `user_user_id` INT NOT NULL,
  `channel_channel_id` INT NOT NULL,
  PRIMARY KEY (`video_id`),
  INDEX `fk_video_user_idx` (`user_user_id` ASC) VISIBLE,
  INDEX `fk_video_channel1_idx` (`channel_channel_id` ASC) VISIBLE,
  CONSTRAINT `fk_video_user`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_video_channel1`
    FOREIGN KEY (`channel_channel_id`)
    REFERENCES `youtube`.`channel` (`channel_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`subscription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`subscription` (
  `user_user_id` INT NOT NULL,
  `channel_channel_id` INT NOT NULL,
  PRIMARY KEY (`user_user_id`, `channel_channel_id`),
  INDEX `fk_user_has_channel_channel1_idx` (`channel_channel_id` ASC) VISIBLE,
  INDEX `fk_user_has_channel_user1_idx` (`user_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_has_channel_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_channel_channel1`
    FOREIGN KEY (`channel_channel_id`)
    REFERENCES `youtube`.`channel` (`channel_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`tag` (
  `tag_id` INT NOT NULL AUTO_INCREMENT,
  `tag_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`tag_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`playlist` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT,
  `playlist_name` VARCHAR(45) NOT NULL,
  `playlist_datetime_creation` DATETIME NOT NULL,
  `playlist_condition` ENUM('pública', 'privada') NOT NULL,
  `user_user_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`),
  INDEX `fk_playlist_user1_idx` (`user_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`playlist_has_video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`playlist_has_video` (
  `playlist_playlist_id` INT NOT NULL,
  `video_video_id` INT NOT NULL,
  PRIMARY KEY (`playlist_playlist_id`, `video_video_id`),
  INDEX `fk_playlist_has_video_video1_idx` (`video_video_id` ASC) VISIBLE,
  INDEX `fk_playlist_has_video_playlist1_idx` (`playlist_playlist_id` ASC) VISIBLE,
  CONSTRAINT `fk_playlist_has_video_playlist1`
    FOREIGN KEY (`playlist_playlist_id`)
    REFERENCES `youtube`.`playlist` (`playlist_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_playlist_has_video_video1`
    FOREIGN KEY (`video_video_id`)
    REFERENCES `youtube`.`video` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`comment` (
  `comment_id` INT NOT NULL AUTO_INCREMENT,
  `comment_text` VARCHAR(255) NOT NULL,
  `comment_datetime` DATETIME NOT NULL,
  `user_user_id` INT NOT NULL,
  `video_video_id` INT NOT NULL,
  PRIMARY KEY (`comment_id`),
  INDEX `fk_comment_user1_idx` (`user_user_id` ASC) VISIBLE,
  INDEX `fk_comment_video1_idx` (`video_video_id` ASC) VISIBLE,
  CONSTRAINT `fk_comment_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_comment_video1`
    FOREIGN KEY (`video_video_id`)
    REFERENCES `youtube`.`video` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`feedback_video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`feedback_video` (
  `feedback_video_id` INT NOT NULL AUTO_INCREMENT,
  `feedback_video_reaction` ENUM('L', 'D') NOT NULL COMMENT 'L: Like\nD: Dislike',
  `feedback_video_datetime` DATETIME NOT NULL,
  `user_user_id` INT NOT NULL,
  `video_video_id` INT NOT NULL,
  PRIMARY KEY (`feedback_video_id`),
  INDEX `fk_feedback_video_user1_idx` (`user_user_id` ASC) VISIBLE,
  INDEX `fk_feedback_video_video1_idx` (`video_video_id` ASC) VISIBLE,
  CONSTRAINT `fk_feedback_video_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_feedback_video_video1`
    FOREIGN KEY (`video_video_id`)
    REFERENCES `youtube`.`video` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`feedback_comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`feedback_comment` (
  `feedback_comment_id` INT NOT NULL AUTO_INCREMENT,
  `feedback_comment_reaction` ENUM('L', 'D') NOT NULL COMMENT 'L: Like\nD: Dislike',
  `feedback_comment_datetime` DATETIME NOT NULL,
  `comment_comment_id` INT NOT NULL,
  `user_user_id` INT NOT NULL,
  PRIMARY KEY (`feedback_comment_id`),
  INDEX `fk_feedback_comment_comment1_idx` (`comment_comment_id` ASC) VISIBLE,
  INDEX `fk_feedback_comment_user1_idx` (`user_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_feedback_comment_comment1`
    FOREIGN KEY (`comment_comment_id`)
    REFERENCES `youtube`.`comment` (`comment_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_feedback_comment_user1`
    FOREIGN KEY (`user_user_id`)
    REFERENCES `youtube`.`user` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `youtube`.`video_has_tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `youtube`.`video_has_tag` (
  `video_video_id` INT NOT NULL,
  `tag_tag_id` INT NOT NULL,
  PRIMARY KEY (`video_video_id`, `tag_tag_id`),
  INDEX `fk_video_has_tag_tag1_idx` (`tag_tag_id` ASC) VISIBLE,
  INDEX `fk_video_has_tag_video1_idx` (`video_video_id` ASC) VISIBLE,
  CONSTRAINT `fk_video_has_tag_video1`
    FOREIGN KEY (`video_video_id`)
    REFERENCES `youtube`.`video` (`video_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_video_has_tag_tag1`
    FOREIGN KEY (`tag_tag_id`)
    REFERENCES `youtube`.`tag` (`tag_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `youtube`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (1, 'pildorasinformaticas', 'hG6&mL4@c', 'pildoras@gmail.com', 'M', 'Espanya', '08030', '1979-10-04');
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (2, 'petejewel', 'rD1@uR1@d', 'pedrojoya@hotmail.com', 'M', 'Espanya', '08014', '1985-02-15');
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (3, 'julianacanetpe', 'julianeta', 'jcanet@gmail.com', 'F', 'Espanya', '08034', '1996-10-23');
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (4, 'programmingwithmosh', 'cB1$mC1~f', 'moshprogramming@hotmail.com', 'M', 'Estats Units', '35801', '1990-12-02');
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (5, 'CodingWithJohn', 'dP9&hD2%g', 'joecampbell@gmail.com', 'M', 'England', 'BB10', '1978-03-24');
INSERT INTO `youtube`.`user` (`user_id`, `user_name`, `user_password`, `user_email`, `user_gender`, `user_country`, `user_zip`, `user_birthdate`) VALUES (6, 'dulceida', 'dulceweek', 'dulceida@gmail.com', 'F', 'Espanya', '08025', '1989-05-28');

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`channel`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (1, 'pildorasinformaticas', 'Este canal pretende compartir conocimientos informáticos entre todos los integrantes de la comunidad Internet. Se tratarán diversas materias, desde ofimática básica y avanzada hasta programación, pasando por diseño gráfico y web.', '2012-05-15', 1);
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (2, 'Pedro Joya', NULL, '2009-06-10', 2);
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (3, 'juliana canet', '@julianacanet', '2017-01-13', 3);
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (4, 'Programming with Mosh', 'Want to become a professional software engineer? All you need is passion and determination, not a degree. Universities make you pay for the subjects you\'ll never use in the real world. ', '2014-10-07', 4);
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (5, 'Coding with John', 'Hi, I\'m John! I\'m a Lead Java Software Engineer and I\'ve been in the programming industry for more than a decade. I love sharing what I\'ve learned over the years in a way that\'s understandable for all levels of Java learners.', '2019-10-07', 5);
INSERT INTO `youtube`.`channel` (`channel_id`, `channel_name`, `channel_description`, `channel_datetime_creation`, `user_user_id`) VALUES (6, 'Dulceida', 'Hola! Bienvenido a mi canal de YouTube! Soy Aida Domenech, más conocida como Dulceida y tengo un blog de moda en el que podéis seguir mi día a día.', '2010-06-27', 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`video`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (1, 'Curso Java. POO I. Vídeo 27', 'En este vídeo comenzamos a ver en qué consiste la Programación orientada a Objetos.', 5.46, 'poo1.avi', '00:20:36', 'https://img.youtube.com/vi/XmUz5WJmJVU/0.jpg', 340661, 8230, DEFAULT, 'públic', '2020-10-02', 1, 1);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (2, '12 - Expresiones lambda', 'Proyecto de demostración de Programación Funcional en Java', 4.30, 'expresioneslambda.mp4', '00:21:37', 'https://img.youtube.com/vi/UHjEqt7QxeU/0.jpg', 1145, 45, 2, 'ocult', '2020-03-20', 2, 2);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (3, 'els canvis també són bons', 'Aquest vídeo forma part de la tirada que faig per canal malaia', 1.70, 'v3_2023.mp4', '00:16:37', 'https://img.youtube.com/vi/nAEil24H2XA/0.jpg', 8369, 419, 23, 'públic', '2023-01-12', 3, 3);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (4, 'MySQL Tutorial for Beginners [Full Course]', 'MySQL tutorial for beginners - Learn MySQL, the world\'s most popular open source database.', 12.56, 'mysql_fullcourse.mp4', '03:10:18', 'https://img.youtube.com/vi/7S_tz1z_5bA/0.jpg', 8424064, 190845, 129, 'públic', '2019-07-11', 4, 4);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (5, 'Optionals In Java - Simple Tutorial', 'Full tutorial on Optionals in Java!', 3.49, 'optionalsjava.mp4', '00:15:52', 'https://img.youtube.com/vi/vKVzRbsMnTQ/0.jpg', 73499, 4678, 51, 'públic', '2022-01-23', 5, 5);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (6, 'Generics In Java - Full Simple Tutorial', 'Full tutorial for using Generics in Java!', 3.78, 'genericsjava.mp4', '00:17:33', 'https://img.youtube.com/vi/K1iu1kXkVoA/0.jpg', 535232, 22054, 33, 'públic', '2021-11-04', 5, 5);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (7, 'LA PEOR ENTREVISTA DE DULCEIDA', '¡¡Hola preciosos!! Hoy os traigo un vídeo diferente para reírnos un rato, estas son las cosas que me encantan de YouTube! ', 1.38, 'entrevista.avi', '00:07:09', 'https://img.youtube.com/vi/FYLaFB_359o/0.jpg', 362114, 10605, 5989, 'privat', '2022-05-23', 6, 6);
INSERT INTO `youtube`.`video` (`video_id`, `video_title`, `video_description`, `video_size`, `video_file_name`, `video_duration`, `video_thumbnail`, `video_reproductions`, `video_likes`, `video_dislikes`, `video_condition`, `video_datetime_publishing`, `user_user_id`, `channel_channel_id`) VALUES (8, 'Curso Java. Programación genérica. ArrayList I. Vídeo 161', 'Vemos en este vídeo la clase ArrayList. Con esta clase podremos almacenar en una lista dinámica objetos de diferentes tipos. Es algo relacionado con la programación genérica que comenzaremos a ver en breve.', 3.78, 'v161.mp4', '00:22:02', 'https://img.youtube.com/vi/uUWEfmaFOkE/0.jpg', 214692, 3385, 3, 'públic', '2020-12-04', 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`subscription`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (1, 4);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (1, 5);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (2, 1);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (4, 5);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (4, 1);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (5, 4);
INSERT INTO `youtube`.`subscription` (`user_user_id`, `channel_channel_id`) VALUES (3, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`tag`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`tag` (`tag_id`, `tag_name`) VALUES (1, '#java');
INSERT INTO `youtube`.`tag` (`tag_id`, `tag_name`) VALUES (2, '#mysql');
INSERT INTO `youtube`.`tag` (`tag_id`, `tag_name`) VALUES (3, '#poo');
INSERT INTO `youtube`.`tag` (`tag_id`, `tag_name`) VALUES (4, '#computerprogramming');
INSERT INTO `youtube`.`tag` (`tag_id`, `tag_name`) VALUES (5, '#lifestyle');

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`playlist`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (1, 'Curso de Java desde 0', '2019-02-03', 'pública', 1);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (2, 'Programación funcional en Java', '2020-11-10', 'privada', 2);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (3, 'Curso Git & GitHub', '2018-10-23', 'pública', 1);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (4, 'Java Tutorials', '2022-01-20', 'pública', 4);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (5, 'Job Interview Preparation Videos', '2019-05-13', 'pública', 4);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (6, 'ONALLIBRES x Juliana Canet', '2022-02-17', 'privada', 3);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (7, 'Java Beginner', '2018-12-22', 'pública', 5);
INSERT INTO `youtube`.`playlist` (`playlist_id`, `playlist_name`, `playlist_datetime_creation`, `playlist_condition`, `user_user_id`) VALUES (8, 'Java Experiments', '2021-08-18', 'pública', 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`playlist_has_video`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`playlist_has_video` (`playlist_playlist_id`, `video_video_id`) VALUES (1, 1);
INSERT INTO `youtube`.`playlist_has_video` (`playlist_playlist_id`, `video_video_id`) VALUES (1, 8);
INSERT INTO `youtube`.`playlist_has_video` (`playlist_playlist_id`, `video_video_id`) VALUES (2, 2);
INSERT INTO `youtube`.`playlist_has_video` (`playlist_playlist_id`, `video_video_id`) VALUES (7, 5);
INSERT INTO `youtube`.`playlist_has_video` (`playlist_playlist_id`, `video_video_id`) VALUES (7, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`comment`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (1, 'This is the gold standard of coding tutorials, thanks for such well-structured info', '2022-12-30', 1, 5);
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (2, 'Thank you Mosh. It is a GREAT HELP!', '2021-12-05', 2, 4);
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (3, 'This is a great tutorial. The speed and way you explain is great. Thank you Mosh! I appreciate the time and effort you took to create this.', '2022-01-02', 5, 4);
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (4, 'Brutal! Boníssim xD', '2023-01-05', 3, 7);
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (5, '¡Es un curso excelente! Gracias.', '2021-06-26', 1, 2);
INSERT INTO `youtube`.`comment` (`comment_id`, `comment_text`, `comment_datetime`, `user_user_id`, `video_video_id`) VALUES (6, 'Este es un curso genial, y la pedagogia puesta en él es una obra de arte. Muchisimas gracias!!!', '2020-12-22', 2, 8);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`feedback_video`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (1, 'L', '2021-10-22', 2, 1);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (2, 'L', '2020-04-05', 1, 2);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (3, 'D', '2023-01-13', 6, 3);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (4, 'L', '2019-11-14', 5, 4);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (5, 'L', '2022-03-16', 1, 4);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (6, 'L', '2021-11-19', 3, 7);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (7, 'D', '2022-07-15', 2, 4);
INSERT INTO `youtube`.`feedback_video` (`feedback_video_id`, `feedback_video_reaction`, `feedback_video_datetime`, `user_user_id`, `video_video_id`) VALUES (8, 'L', '2021-06-27', 4, 8);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`feedback_comment`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (1, 'L', '2023-01-07', 6, 1);
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (2, 'L', '2021-11-10', 1, 5);
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (3, 'D', '2022-06-13', 4, 2);
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (4, 'L', '2022-09-15', 3, 4);
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (5, 'D', '2021-12-30', 4, 1);
INSERT INTO `youtube`.`feedback_comment` (`feedback_comment_id`, `feedback_comment_reaction`, `feedback_comment_datetime`, `comment_comment_id`, `user_user_id`) VALUES (6, 'L', '2022-10-27', 5, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `youtube`.`video_has_tag`
-- -----------------------------------------------------
START TRANSACTION;
USE `youtube`;
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (1, 1);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (2, 1);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (5, 1);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (6, 1);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (8, 1);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (4, 2);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (1, 3);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (1, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (2, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (4, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (5, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (6, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (8, 4);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (3, 5);
INSERT INTO `youtube`.`video_has_tag` (`video_video_id`, `tag_tag_id`) VALUES (7, 5);

COMMIT;

